/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Member } from './Member';
import {
    MemberFromJSON,
    MemberFromJSONTyped,
    MemberToJSON,
    MemberToJSONTyped,
} from './Member';

/**
 * 
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    quote: string;
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    date: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    location: string | null;
    /**
     * 
     * @type {number}
     * @memberof Quote
     */
    id: number;
    /**
     * 
     * @type {Member}
     * @memberof Quote
     */
    author: Member;
}

/**
 * Check if a given object implements the Quote interface.
 */
export function instanceOfQuote(value: object): value is Quote {
    if (!('quote' in value) || value['quote'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    return true;
}

export function QuoteFromJSON(json: any): Quote {
    return QuoteFromJSONTyped(json, false);
}

export function QuoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Quote {
    if (json == null) {
        return json;
    }
    return {
        
        'quote': json['quote'],
        'date': (json['date'] == null ? null : new Date(json['date'])),
        'location': json['location'],
        'id': json['id'],
        'author': MemberFromJSON(json['author']),
    };
}

  export function QuoteToJSON(json: any): Quote {
      return QuoteToJSONTyped(json, false);
  }

  export function QuoteToJSONTyped(value?: Quote | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'quote': value['quote'],
        'date': (value['date'] == null ? null : (value['date'] as any).toISOString()),
        'location': value['location'],
        'id': value['id'],
        'author': MemberToJSON(value['author']),
    };
}

