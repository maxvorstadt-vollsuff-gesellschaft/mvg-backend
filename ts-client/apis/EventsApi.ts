/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Event,
  EventCreate,
  HTTPValidationError,
  ResponseGetDrinksForEventEventsEventIdDrinksGet,
} from '../models/index';
import {
    EventFromJSON,
    EventToJSON,
    EventCreateFromJSON,
    EventCreateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ResponseGetDrinksForEventEventsEventIdDrinksGetFromJSON,
    ResponseGetDrinksForEventEventsEventIdDrinksGetToJSON,
} from '../models/index';

export interface CreateEventEventsPostRequest {
    args: any;
    kwargs: any;
    eventCreate: EventCreate;
}

export interface DeleteEventEventsEventIdDeleteRequest {
    id: number;
    args: any;
    kwargs: any;
}

export interface EventsEventsGetRequest {
    skip?: number;
    limit?: number;
}

export interface EventsEventsUpcomingGetRequest {
    limit?: number;
}

export interface GetDrinksForEventEventsEventIdDrinksGetRequest {
    eventId: number;
    grouped?: boolean;
}

export interface GetEventEventsEventIdGetRequest {
    id: number;
}

export interface ParticipateEventsEventIdParticipatePostRequest {
    eventId: number;
    member: number;
    args: any;
    kwargs: any;
}

export interface RemoveParticipantEventsEventIdParticipateDeleteRequest {
    eventId: number;
    member: number;
    args: any;
    kwargs: any;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Create Event
     */
    async createEventEventsPostRaw(requestParameters: CreateEventEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['args'] == null) {
            throw new runtime.RequiredError(
                'args',
                'Required parameter "args" was null or undefined when calling createEventEventsPost().'
            );
        }

        if (requestParameters['kwargs'] == null) {
            throw new runtime.RequiredError(
                'kwargs',
                'Required parameter "kwargs" was null or undefined when calling createEventEventsPost().'
            );
        }

        if (requestParameters['eventCreate'] == null) {
            throw new runtime.RequiredError(
                'eventCreate',
                'Required parameter "eventCreate" was null or undefined when calling createEventEventsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['args'] != null) {
            queryParameters['args'] = requestParameters['args'];
        }

        if (requestParameters['kwargs'] != null) {
            queryParameters['kwargs'] = requestParameters['kwargs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventCreateToJSON(requestParameters['eventCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Event
     */
    async createEventEventsPost(requestParameters: CreateEventEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createEventEventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Event
     */
    async deleteEventEventsEventIdDeleteRaw(requestParameters: DeleteEventEventsEventIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteEventEventsEventIdDelete().'
            );
        }

        if (requestParameters['args'] == null) {
            throw new runtime.RequiredError(
                'args',
                'Required parameter "args" was null or undefined when calling deleteEventEventsEventIdDelete().'
            );
        }

        if (requestParameters['kwargs'] == null) {
            throw new runtime.RequiredError(
                'kwargs',
                'Required parameter "kwargs" was null or undefined when calling deleteEventEventsEventIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['args'] != null) {
            queryParameters['args'] = requestParameters['args'];
        }

        if (requestParameters['kwargs'] != null) {
            queryParameters['kwargs'] = requestParameters['kwargs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Delete Event
     */
    async deleteEventEventsEventIdDelete(requestParameters: DeleteEventEventsEventIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.deleteEventEventsEventIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Events
     */
    async eventsEventsGetRaw(requestParameters: EventsEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Events
     */
    async eventsEventsGet(requestParameters: EventsEventsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Event>> {
        const response = await this.eventsEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Events
     */
    async eventsEventsUpcomingGetRaw(requestParameters: EventsEventsUpcomingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/upcoming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Events
     */
    async eventsEventsUpcomingGet(requestParameters: EventsEventsUpcomingGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Event>> {
        const response = await this.eventsEventsUpcomingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Drinks For Event
     */
    async getDrinksForEventEventsEventIdDrinksGetRaw(requestParameters: GetDrinksForEventEventsEventIdDrinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseGetDrinksForEventEventsEventIdDrinksGet>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getDrinksForEventEventsEventIdDrinksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['grouped'] != null) {
            queryParameters['grouped'] = requestParameters['grouped'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/drinks`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseGetDrinksForEventEventsEventIdDrinksGetFromJSON(jsonValue));
    }

    /**
     * Get Drinks For Event
     */
    async getDrinksForEventEventsEventIdDrinksGet(requestParameters: GetDrinksForEventEventsEventIdDrinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseGetDrinksForEventEventsEventIdDrinksGet> {
        const response = await this.getDrinksForEventEventsEventIdDrinksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Event
     */
    async getEventEventsEventIdGetRaw(requestParameters: GetEventEventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEventEventsEventIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Get Event
     */
    async getEventEventsEventIdGet(requestParameters: GetEventEventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.getEventEventsEventIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Participate
     */
    async participateEventsEventIdParticipatePostRaw(requestParameters: ParticipateEventsEventIdParticipatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling participateEventsEventIdParticipatePost().'
            );
        }

        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling participateEventsEventIdParticipatePost().'
            );
        }

        if (requestParameters['args'] == null) {
            throw new runtime.RequiredError(
                'args',
                'Required parameter "args" was null or undefined when calling participateEventsEventIdParticipatePost().'
            );
        }

        if (requestParameters['kwargs'] == null) {
            throw new runtime.RequiredError(
                'kwargs',
                'Required parameter "kwargs" was null or undefined when calling participateEventsEventIdParticipatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['member'] != null) {
            queryParameters['member'] = requestParameters['member'];
        }

        if (requestParameters['args'] != null) {
            queryParameters['args'] = requestParameters['args'];
        }

        if (requestParameters['kwargs'] != null) {
            queryParameters['kwargs'] = requestParameters['kwargs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/participate`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Participate
     */
    async participateEventsEventIdParticipatePost(requestParameters: ParticipateEventsEventIdParticipatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.participateEventsEventIdParticipatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Participant
     */
    async removeParticipantEventsEventIdParticipateDeleteRaw(requestParameters: RemoveParticipantEventsEventIdParticipateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling removeParticipantEventsEventIdParticipateDelete().'
            );
        }

        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling removeParticipantEventsEventIdParticipateDelete().'
            );
        }

        if (requestParameters['args'] == null) {
            throw new runtime.RequiredError(
                'args',
                'Required parameter "args" was null or undefined when calling removeParticipantEventsEventIdParticipateDelete().'
            );
        }

        if (requestParameters['kwargs'] == null) {
            throw new runtime.RequiredError(
                'kwargs',
                'Required parameter "kwargs" was null or undefined when calling removeParticipantEventsEventIdParticipateDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['member'] != null) {
            queryParameters['member'] = requestParameters['member'];
        }

        if (requestParameters['args'] != null) {
            queryParameters['args'] = requestParameters['args'];
        }

        if (requestParameters['kwargs'] != null) {
            queryParameters['kwargs'] = requestParameters['kwargs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/participate`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Remove Participant
     */
    async removeParticipantEventsEventIdParticipateDelete(requestParameters: RemoveParticipantEventsEventIdParticipateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.removeParticipantEventsEventIdParticipateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
