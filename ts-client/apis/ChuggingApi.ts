/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseChug,
  HTTPValidationError,
  UploadChug,
} from '../models/index';
import {
    BaseChugFromJSON,
    BaseChugToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UploadChugFromJSON,
    UploadChugToJSON,
} from '../models/index';

export interface CreateEventChugsPostRequest {
    uploadChug: UploadChug;
}

export interface EventsChugsGetRequest {
    skip?: number;
    limit?: number;
}

export interface TopPlayerChugsTopPlayerGetRequest {
    limit?: number;
}

/**
 * 
 */
export class ChuggingApi extends runtime.BaseAPI {

    /**
     * Create Event
     */
    async createEventChugsPostRaw(requestParameters: CreateEventChugsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['uploadChug'] == null) {
            throw new runtime.RequiredError(
                'uploadChug',
                'Required parameter "uploadChug" was null or undefined when calling createEventChugsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chugs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadChugToJSON(requestParameters['uploadChug']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Event
     */
    async createEventChugsPost(requestParameters: CreateEventChugsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createEventChugsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Events
     */
    async eventsChugsGetRaw(requestParameters: EventsChugsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BaseChug>>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chugs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BaseChugFromJSON));
    }

    /**
     * Events
     */
    async eventsChugsGet(requestParameters: EventsChugsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BaseChug>> {
        const response = await this.eventsChugsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Top Player
     */
    async topPlayerChugsTopPlayerGetRaw(requestParameters: TopPlayerChugsTopPlayerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BaseChug>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chugs/top-player`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BaseChugFromJSON));
    }

    /**
     * Top Player
     */
    async topPlayerChugsTopPlayerGet(requestParameters: TopPlayerChugsTopPlayerGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BaseChug>> {
        const response = await this.topPlayerChugsTopPlayerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
