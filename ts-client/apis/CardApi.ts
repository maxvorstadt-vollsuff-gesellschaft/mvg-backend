/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCard,
  HTTPValidationError,
} from '../models/index';
import {
    CreateCardFromJSON,
    CreateCardToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateCardCardPostRequest {
    createCard: CreateCard;
}

export interface DeleteCardCardMemberIdDeleteRequest {
    memberId: number;
}

/**
 * 
 */
export class CardApi extends runtime.BaseAPI {

    /**
     * Create Card
     */
    async createCardCardPostRaw(requestParameters: CreateCardCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['createCard'] == null) {
            throw new runtime.RequiredError(
                'createCard',
                'Required parameter "createCard" was null or undefined when calling createCardCardPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/card`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCardToJSON(requestParameters['createCard']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Card
     */
    async createCardCardPost(requestParameters: CreateCardCardPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createCardCardPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Card
     */
    async deleteCardCardMemberIdDeleteRaw(requestParameters: DeleteCardCardMemberIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling deleteCardCardMemberIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/card/{member_id}`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Card
     */
    async deleteCardCardMemberIdDelete(requestParameters: DeleteCardCardMemberIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteCardCardMemberIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Cards
     */
    async getCardsCardGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/card`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Cards
     */
    async getCardsCardGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getCardsCardGetRaw(initOverrides);
        return await response.value();
    }

}
