/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ResponseGetDrinksForEventEventsEventIdDrinksGet,
  ResponseGetDrinksForEventMembersMemberIdDrinksGet,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ResponseGetDrinksForEventEventsEventIdDrinksGetFromJSON,
    ResponseGetDrinksForEventEventsEventIdDrinksGetToJSON,
    ResponseGetDrinksForEventMembersMemberIdDrinksGetFromJSON,
    ResponseGetDrinksForEventMembersMemberIdDrinksGetToJSON,
} from '../models/index';

export interface GetDrinksForEventEventsEventIdDrinksGet0Request {
    eventId: number;
    grouped?: boolean;
}

export interface GetDrinksForEventMembersMemberIdDrinksGet0Request {
    memberId: number;
    grouped?: boolean;
}

/**
 * 
 */
export class DrinksApi extends runtime.BaseAPI {

    /**
     * Get Drinks For Event
     */
    async getDrinksForEventEventsEventIdDrinksGetRaw(requestParameters: GetDrinksForEventEventsEventIdDrinksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseGetDrinksForEventEventsEventIdDrinksGet>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getDrinksForEventEventsEventIdDrinksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['grouped'] != null) {
            queryParameters['grouped'] = requestParameters['grouped'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/drinks`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseGetDrinksForEventEventsEventIdDrinksGetFromJSON(jsonValue));
    }

    /**
     * Get Drinks For Event
     */
    async getDrinksForEventEventsEventIdDrinksGet(requestParameters: GetDrinksForEventEventsEventIdDrinksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseGetDrinksForEventEventsEventIdDrinksGet> {
        const response = await this.getDrinksForEventEventsEventIdDrinksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Drinks For Event
     */
    async getDrinksForEventMembersMemberIdDrinksGetRaw(requestParameters: GetDrinksForEventMembersMemberIdDrinksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseGetDrinksForEventMembersMemberIdDrinksGet>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling getDrinksForEventMembersMemberIdDrinksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['grouped'] != null) {
            queryParameters['grouped'] = requestParameters['grouped'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{member_id}/drinks`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseGetDrinksForEventMembersMemberIdDrinksGetFromJSON(jsonValue));
    }

    /**
     * Get Drinks For Event
     */
    async getDrinksForEventMembersMemberIdDrinksGet(requestParameters: GetDrinksForEventMembersMemberIdDrinksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseGetDrinksForEventMembersMemberIdDrinksGet> {
        const response = await this.getDrinksForEventMembersMemberIdDrinksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
