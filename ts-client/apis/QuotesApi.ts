/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Quote,
  QuoteCreate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    QuoteFromJSON,
    QuoteToJSON,
    QuoteCreateFromJSON,
    QuoteCreateToJSON,
} from '../models/index';

export interface CreateQuoteQuotesPostRequest {
    args: any;
    kwargs: any;
    quoteCreate: QuoteCreate;
}

export interface GetQuotesQuotesGetRequest {
    limit?: number;
    skip?: number;
}

/**
 * 
 */
export class QuotesApi extends runtime.BaseAPI {

    /**
     * Create Quote
     */
    async createQuoteQuotesPostRaw(requestParameters: CreateQuoteQuotesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['args'] == null) {
            throw new runtime.RequiredError(
                'args',
                'Required parameter "args" was null or undefined when calling createQuoteQuotesPost().'
            );
        }

        if (requestParameters['kwargs'] == null) {
            throw new runtime.RequiredError(
                'kwargs',
                'Required parameter "kwargs" was null or undefined when calling createQuoteQuotesPost().'
            );
        }

        if (requestParameters['quoteCreate'] == null) {
            throw new runtime.RequiredError(
                'quoteCreate',
                'Required parameter "quoteCreate" was null or undefined when calling createQuoteQuotesPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['args'] != null) {
            queryParameters['args'] = requestParameters['args'];
        }

        if (requestParameters['kwargs'] != null) {
            queryParameters['kwargs'] = requestParameters['kwargs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/quotes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuoteCreateToJSON(requestParameters['quoteCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Create Quote
     */
    async createQuoteQuotesPost(requestParameters: CreateQuoteQuotesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.createQuoteQuotesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Quotes
     */
    async getQuotesQuotesGetRaw(requestParameters: GetQuotesQuotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quotes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Quotes
     */
    async getQuotesQuotesGet(requestParameters: GetQuotesQuotesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getQuotesQuotesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Quote Of The Day
     */
    async quoteOfTheDayQuotesRandomQuoteGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quotes/random_quote`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Quote Of The Day
     */
    async quoteOfTheDayQuotesRandomQuoteGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quoteOfTheDayQuotesRandomQuoteGetRaw(initOverrides);
        return await response.value();
    }

}
